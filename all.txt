4
******************************************************
                              5
config static 

add in settings 
STATIC_ROOT = BASE_DIR / 'static'

STATICFILES_DIRS = [
    'greatkart/static',
]

create folder static in  greatkart main app and add all folder img css js 
now for add all files static in project you do this:

python manage.py collectstatic

he create folder static outside the main app
**********************************************************************************************
                                           6
create base template  
create includes folder you add files footer.html and header.html 
you find <header> and put in   header.html                                         
you find <footer> and put in   footer.html    

you add in base.html 

{% include 'includes/navbar.html' %}

{% block content %}

{% endblock  %}

{% include 'includes/footer.html' %}
************************************************************************************************
                                     6 a
       download template to site greatkart
**********************************************************************************************
                                     7
create category app  in project
you add category at settings main app greatkart           

go models category 
create class  category:
from django.db import models

# Create your models here.
class Category(models.Model):
    category_name = models.CharField(max_length=50, unique=True)
    slug          = models.SlugField(max_length=100, unique=True)
    description   = models.TextField(max_length=355, blank=True)
    cart_image    = models.ImageField(upload_to='photos/categories', blank=True)
    
    class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'
    
    def __str__(self):
        return self.category_name    
    
after:
you go admin
from .models import Category

# Register your models here.

admin.site.register(Category)
***********************************************************************************************
                                                  8 - 9
create a new app accounts
begine class Account  MyAccountManager
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

# Create your models here.
class MyAccountManager(BaseUserManager):
    def create_user(self, first_name, last_name, username, email, phone_number, password=None):
        if not email:
            raise ValueError('User must have an email address')
        
        if not username:
            raise ValueError('User must have a username')
        
        user = self.model(
            email = self.normalize_email(email),
            username = username,
            first_name = first_name,
            last_name = last_name,

        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, first_name, last_name, email ,username, password):
        user = self.create_user(
            email      = self.normalize_email(email),
            username   = username,
            password   = password,
            first_name = first_name,
            last_name  = last_name,
            
        )
        user.is_admin      = True     
        user.is_active     = True   
        user.is_staff      = True
        user.is_superadmin = True
        
        user.save(using=self._db)
        return user

class Account(AbstractBaseUser):
    first_name     = models.CharField(max_length=50)
    last_name      = models.CharField(max_length=50)
    username       = models.CharField(max_length=50)
    email          = models.EmailField(max_length=100, unique=True)
    phone_number   = models.CharField(max_length=50)
    
    # required
    date_joined    = models.DateTimeField(auto_now_add=True)
    last_login     = models.DateTimeField(auto_now_add=True)
    
    is_admin       = models.BooleanField(default=False)
    is_staff       = models.BooleanField(default=False)
    is_active      = models.BooleanField(default=False)
    is_superadmin  = models.BooleanField(default=False)
    
    USERNAME_FIELD  = 'email'
    REQUIRED_FIELDS = ['username','first_name','last_name']
    
    objects = MyAccountManager()
    
    def __str__(self):
        return self.email
    
    def has_perm(self, perm, obj=None):
        return self.is_admin
    
    def has_module_perms(self, add_label):
        return True

after:
you go settings you add      AUTH_USER_MODEL = 'accounts.Account'

for inser what you create in models accounts


after:
you go admin.py accounts
from .models import Account
admin.site.register(Account)

important :  you are obligate to delet database  in category and accounts

after :
you runserver you have an error 
first you repeat  
python manage.py makemigrations
python manage.py migrate

after:
you create superuser 


*****************************************************************************************************
                                                10
                                       password show in database this is a problem

hidden password
you go in admin accounts
import 
from django.contrib.auth.admin import UserAdmin

after create class AccountAdmin
# Register your models here.
class AccountAdmin(UserAdmin):
    list_display = ('email','first_name','last_name','username','last_login','date_joined','is_active')
    
    
    filter_horizontal = ()
    list_filter = ()
    fieldsets = ()

admin.site.register(Account, AccountAdmin)

we add at function 
class AccountAdmin(UserAdmin):
    list_display = ('email','first_name','last_name','username','last_login','date_joined','is_active')


    list_display_links = ('email','first_name','last_name')
    readonly_fields = ('last_login','date_joined')
    ordering = ('-date_joined',)
    
    filter_horizontal = ()
    list_filter = ()
    fieldsets = ()
admin.site.register(Account, AccountAdmin)
*********************************************************************************************************
                                              11
add category product
first configure media 

you go settings 
you add 

MEDIA_URL  = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

after:
you go urls greatkart the main app
you add 

from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home, name='home'),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


********************************************************************************************************
                                           12
when you read  category name  the slug read alone 

you go admin.py category 
you add

class CategoryAdmin(admin.ModelAdmin):
    prepopulated_fields = {'slug': ('category_name',)}
    list_display = ('category_name', 'slug')

admin.site.register(Category, CategoryAdmin)

after:
you add all image name slug description  for category

********************************************************************************************************
                                             13
download sqlitestudio      SQLteStudio   
********************************************************************************************************
                                              14
create new app store
you go settings in INSTALLED_APPS 
you add 'store',                                

you go models.py in store app 
you create class Product         don't forget   Category Foreignkey

from django.db import models
from category.models import Category
# Create your models here.
class Product(models.Model):
    product_name   = models.CharField(max_length=200, unique=True)
    slug           = models.SlugField(max_length=200, unique=True)
    description    = models.TextField(max_length=500, blank=True)
    price          = models.IntegerField()
    images         = models.ImageField(upload_to='photos/products')
    stock          = models.IntegerField()
    is_available   = models.BooleanField(default=True)
    category       = models.ForeignKey(Category, on_delete=models.CASCADE)
    
    created_date   = models.DateTimeField(auto_now_add=True)
    modified_date  = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.product_name


after:
you go admin.py in store 

from django.contrib import admin
from .models import Product
# Register your models here.

class ProductAdmin(admin.ModelAdmin):
    list_display = ('product_name', 'price', 'stock', 'category', 'modified_date', 'is_available')
    prepopulated_fields = {'slug': ('product_name',)}
    
admin.site.register(Product, ProductAdmin)

after:
python manage.py makemigrations 
python manage.py migrate 

***************************************************************************************************
                                    15
add product in database  name slug price stock image available category

***************************************************************************************************
                                          16

you go greatkart main app in viewx  at function  home       you add

def home(request):
    products = Product.objects.all().filter(is_available=True)
    context ={
        'products':products,
    }
    return render(request, 'home.html', context)

go templates in  home.html   for add images price product_name  product

<div class="row">
	{% for product in products %}
	<div class="col-md-3">
		<div class="card card-product-grid">
			<a href="./product-detail.html" class="img-wrap"> <img src="{{  product.images.url }}"> </a>
			<figcaption class="info-wrap">
				<a href="./product-detail.html" class="title">{{ product.product_name }}</a>
				<div class="price mt-1">${{ product.price }}  </div> <!-- price-wrap.// -->
			</figcaption>
		</div>
	</div> <!-- col.// -->
	{% endfor %}

*****************************************************************************************************
                                               17  18
add store.html
you go store app  

create urls.py 
from django.urls import path 
from . import views

urlpatterns = [
    path('',views.store, name='store'),
]

go views create function store
from django.shortcuts import render

# Create your views here.
def store(request):
    return render(request, 'store/store.html')

after:
go templates create folder store 

create file store.html
add mysite store.html file put in  store templates 

after:
go views store:
from django.shortcuts import render
from django.http import HttpResponse
from django.urls import path
from store.models import Product

def home(request):
    products = Product.objects.all().filter(is_available=True)
    context ={
        'products':products,
    }
    return render(request, 'home.html', context) 

in templates store.html 
you add {% for %}  for add images product_name price 

*****************************************************************************************************
                                            19
                                       all Category the site with function 

we add     from django.shortcuts import render, get_object_or_404
           from category.models import Category
                        
you go urls.py store you add new url

path('<slug:category_slug>/',views.store, name='products_by_category'),

after:
go to views.py in the sane function store  :

def store(request, category_slug=None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category, slug=category_slug)
        products    = Product.objects.filter(category=categories, is_available=True)
        product_count = products.count()
        
    else:    
        products = Product.objects.all().filter(is_available=True)
        product_count = products.count()
    context = {
        'products':products,
        'product_count':product_count,
    }
    return render(request, 'store/store.html', context)

**********************************************************************************************************    
                                            20 
add category list in navbar.html

first:
you go in category   you create a new file context_processors.py
you add in :

from .models import category
def menu_links(request):
    links = Category.objects.all()
    return dic(links=links)

after:
you go settings main app
you add   'category.context_processors.menu_links',   in   TEMPLATES

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'category.context_processors.menu_links',
            ],
        },
    },
]

after:
you go navbar.html
1  you add  {for}   show all category
<div class="dropdown-menu">
                    {% for category in links %}
                    <a class="dropdown-item" href="">{{ category.category_name}} </a>
                    {% endfor %}
                    
</div>
2  add url in href=""  for show category

3 go models.py  de category : you add function get_url 
from django.db import models
from django.urls import reverse

# Create your models here.
class Category(models.Model):
    category_name = models.CharField(max_length=50, unique=True)
    slug          = models.SlugField(max_length=100, unique=True)
    description   = models.TextField(max_length=355, blank=True)
    cart_image    = models.ImageField(upload_to='photos/categories', blank=True)
    
    class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'
        
    def get_url(self):
        return reverse('products_by_category', args=[self.slug])
    
    def __str__(self):
        return self.category_name    
    

after    href="{{ category.get_url }}"

<div class="dropdown-menu">
                    {% for category in links %}
                    <a class="dropdown-item" href="{{ category.get_url }}">{{ category.category_name }} </a>
                    {% endfor %}
                    
                </div>

after: you add all products with link href="{% url 'store' %}"
<div class="dropdown-menu">
                    <a class="dropdown-item" href="{% url 'store' %}"> All Products </a>
                    {% for category in links %}
                    <a class="dropdown-item" href="{{ category.get_url }}">{{ category.category_name }} </a>
                    {% endfor %}
                    
                </div>
**************************************************************************************************
                                                   21
after:
you go store.html
change category nav in left 

<div class="card-body">
				
				<ul class="list-menu">
				<li><a href="{% url 'store' %}">All Product</a></li>
			    {% for category in links %}		
				<li><a href="{{ category.get_url }}">{{ category.category_name }}  </a></li>
				{% endfor %}
				
				</ul>

			</div> <!-- card-body.// -->


********************************************************************************************************
                                             22 23 24
add product_detail

go urls.py store create url for product_detail
    path('<slug:category_slug>/<slug:product_slug>/',views.product_detail, name='product_detail'),

from django.urls import path 
from . import views

urlpatterns = [
    path('',views.store, name='store'),
    path('<slug:category_slug>/',views.store, name='products_by_category'),
    path('<slug:category_slug>/<slug:product_slug>/',views.product_detail, name='product_detail'),
]
after:
you go views store create function with 2 args  category_slug   product_slug

def product_detail(request, category_slug, product_slug):
    
    return render(request, 'store/product_detail.html')

after:
you go templates you create file product_detail.html


after:
you improves the function 

def product_detail(request, category_slug, product_slug):
    
    try:
        single_product = Product.objects.get(category__slug=category_slug, slug=product_slug)
    except Exception as e:
        raise e
    context = {
        'single_product':single_product,
    }
    return render(request, 'store/product_detail.html', context)

after:


you go store in models.py at class  Product

you add url for product detail by function  get_url

def get_url(self):
    return reverse('product_detail', args=[self.category.slug, self.slug])

after you go at home.html and store.html you add  {{ product.get_url }}  in href=''  at image and name 

<a href="{{ product.get_url }}" class="title">{{ product.product_name }} </a>


after add url for store and GREATEKART LOGO  and see all
{% url 'store' %} store.html
{% url 'home' %} home.html
{% url 'store' %} See ALL

**************************************************************************************************************************
                                                   25

change banner image  with cover.jpg

**********************************************************************************************************
                                                    26
change botton add cart bay no product

if product stock in database   == 0   button add cart delete and show  out stock

{% if single_product.stock <= 0 %}
		<h5 class="text-danger">Out Of Stock</h5>
{% else %}
		<a href="./product-detail.html" class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i>  </a>
{% endif %}

***************************************************************************************************
                                              27  github
create github





                                                  
                                                  
