4
******************************************************
                              5
config static 

add in settings 
STATIC_ROOT = BASE_DIR / 'static'

STATICFILES_DIRS = [
    'greatkart/static',
]

create folder static in  greatkart main app and add all folder img css js 
now for add all files static in project you do this:

python manage.py collectstatic

he create folder static outside the main app
**********************************************************************************************
                                           6
create base template  
create includes folder you add files footer.html and header.html 
you find <header> and put in   header.html                                         
you find <footer> and put in   footer.html    

you add in base.html 

{% include 'includes/navbar.html' %}

{% block content %}

{% endblock  %}

{% include 'includes/footer.html' %}
************************************************************************************************
                                     6 a
       download template to site greatkart
**********************************************************************************************
                                     7
create category app  in project
you add category at settings main app greatkart           

go models category 
create class  category:
from django.db import models

# Create your models here.
class Category(models.Model):
    category_name = models.CharField(max_length=50, unique=True)
    slug          = models.SlugField(max_length=100, unique=True)
    description   = models.TextField(max_length=355, blank=True)
    cart_image    = models.ImageField(upload_to='photos/categories', blank=True)
    
    class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'
    
    def __str__(self):
        return self.category_name    
    
after:
you go admin
from .models import Category

# Register your models here.

admin.site.register(Category)
***********************************************************************************************
                                                  8 - 9
create a new app accounts
begine class Account  MyAccountManager
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

# Create your models here.
class MyAccountManager(BaseUserManager):
    def create_user(self, first_name, last_name, username, email, phone_number, password=None):
        if not email:
            raise ValueError('User must have an email address')
        
        if not username:
            raise ValueError('User must have a username')
        
        user = self.model(
            email = self.normalize_email(email),
            username = username,
            first_name = first_name,
            last_name = last_name,

        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, first_name, last_name, email ,username, password):
        user = self.create_user(
            email      = self.normalize_email(email),
            username   = username,
            password   = password,
            first_name = first_name,
            last_name  = last_name,
            
        )
        user.is_admin      = True     
        user.is_active     = True   
        user.is_staff      = True
        user.is_superadmin = True
        
        user.save(using=self._db)
        return user

class Account(AbstractBaseUser):
    first_name     = models.CharField(max_length=50)
    last_name      = models.CharField(max_length=50)
    username       = models.CharField(max_length=50)
    email          = models.EmailField(max_length=100, unique=True)
    phone_number   = models.CharField(max_length=50)
    
    # required
    date_joined    = models.DateTimeField(auto_now_add=True)
    last_login     = models.DateTimeField(auto_now_add=True)
    
    is_admin       = models.BooleanField(default=False)
    is_staff       = models.BooleanField(default=False)
    is_active      = models.BooleanField(default=False)
    is_superadmin  = models.BooleanField(default=False)
    
    USERNAME_FIELD  = 'email'
    REQUIRED_FIELDS = ['username','first_name','last_name']
    
    objects = MyAccountManager()
    
    def __str__(self):
        return self.email
    
    def has_perm(self, perm, obj=None):
        return self.is_admin
    
    def has_module_perms(self, add_label):
        return True

after:
you go settings you add      AUTH_USER_MODEL = 'accounts.Account'

for inser what you create in models accounts


after:
you go admin.py accounts
from .models import Account
admin.site.register(Account)

important :  you are obligate to delet database  in category and accounts

after :
you runserver you have an error 
first you repeat  
python manage.py makemigrations
python manage.py migrate

after:
you create superuser 


*****************************************************************************************************
                                                10
                                       password show in database this is a problem

hidden password
you go in admin accounts
import 
from django.contrib.auth.admin import UserAdmin

after create class AccountAdmin
# Register your models here.
class AccountAdmin(UserAdmin):
    list_display = ('email','first_name','last_name','username','last_login','date_joined','is_active')
    
    
    filter_horizontal = ()
    list_filter = ()
    fieldsets = ()

admin.site.register(Account, AccountAdmin)

we add at function 
class AccountAdmin(UserAdmin):
    list_display = ('email','first_name','last_name','username','last_login','date_joined','is_active')


    list_display_links = ('email','first_name','last_name')
    readonly_fields = ('last_login','date_joined')
    ordering = ('-date_joined',)
    
    filter_horizontal = ()
    list_filter = ()
    fieldsets = ()
admin.site.register(Account, AccountAdmin)
*********************************************************************************************************
                                              11
add category product
first configure media 

you go settings 
you add 

MEDIA_URL  = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

after:
you go urls greatkart the main app
you add 

from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home, name='home'),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


********************************************************************************************************
                                           12
when you read  category name  the slug read alone 

you go admin.py category 
you add

class CategoryAdmin(admin.ModelAdmin):
    prepopulated_fields = {'slug': ('category_name',)}
    list_display = ('category_name', 'slug')

admin.site.register(Category, CategoryAdmin)

after:
you add all image name slug description  for category

********************************************************************************************************
                                             13
download sqlitestudio      SQLteStudio   
********************************************************************************************************
                                              14
create new app store
you go settings in INSTALLED_APPS 
you add 'store',                                

you go models.py in store app 
you create class Product         don't forget   Category Foreignkey

from django.db import models
from category.models import Category
# Create your models here.
class Product(models.Model):
    product_name   = models.CharField(max_length=200, unique=True)
    slug           = models.SlugField(max_length=200, unique=True)
    description    = models.TextField(max_length=500, blank=True)
    price          = models.IntegerField()
    images         = models.ImageField(upload_to='photos/products')
    stock          = models.IntegerField()
    is_available   = models.BooleanField(default=True)
    category       = models.ForeignKey(Category, on_delete=models.CASCADE)
    
    created_date   = models.DateTimeField(auto_now_add=True)
    modified_date  = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.product_name


after:
you go admin.py in store 

from django.contrib import admin
from .models import Product
# Register your models here.

class ProductAdmin(admin.ModelAdmin):
    list_display = ('product_name', 'price', 'stock', 'category', 'modified_date', 'is_available')
    prepopulated_fields = {'slug': ('product_name',)}
    
admin.site.register(Product, ProductAdmin)

after:
python manage.py makemigrations 
python manage.py migrate 

***************************************************************************************************
                                    15
add product in database  name slug price stock image available category

***************************************************************************************************
                                          16

you go greatkart main app in viewx  at function  home       you add

def home(request):
    products = Product.objects.all().filter(is_available=True)
    context ={
        'products':products,
    }
    return render(request, 'home.html', context)

go templates in  home.html   for add images price product_name  product

<div class="row">
	{% for product in products %}
	<div class="col-md-3">
		<div class="card card-product-grid">
			<a href="./product-detail.html" class="img-wrap"> <img src="{{  product.images.url }}"> </a>
			<figcaption class="info-wrap">
				<a href="./product-detail.html" class="title">{{ product.product_name }}</a>
				<div class="price mt-1">${{ product.price }}  </div> <!-- price-wrap.// -->
			</figcaption>
		</div>
	</div> <!-- col.// -->
	{% endfor %}

*****************************************************************************************************
                                               17  18
add store.html
you go store app  

create urls.py 
from django.urls import path 
from . import views

urlpatterns = [
    path('',views.store, name='store'),
]

go views create function store
from django.shortcuts import render

# Create your views here.
def store(request):
    return render(request, 'store/store.html')

after:
go templates create folder store 

create file store.html
add mysite store.html file put in  store templates 

after:
go views store:
from django.shortcuts import render
from django.http import HttpResponse
from django.urls import path
from store.models import Product

def home(request):
    products = Product.objects.all().filter(is_available=True)
    context ={
        'products':products,
    }
    return render(request, 'home.html', context) 

in templates store.html 
you add {% for %}  for add images product_name price 

*****************************************************************************************************
                                            19
                                       all Category the site with function 

we add     from django.shortcuts import render, get_object_or_404
           from category.models import Category
                        
you go urls.py store you add new url

path('<slug:category_slug>/',views.store, name='products_by_category'),

after:
go to views.py in the sane function store  :

def store(request, category_slug=None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category, slug=category_slug)
        products    = Product.objects.filter(category=categories, is_available=True)
        product_count = products.count()
        
    else:    
        products = Product.objects.all().filter(is_available=True)
        product_count = products.count()
    context = {
        'products':products,
        'product_count':product_count,
    }
    return render(request, 'store/store.html', context)

**********************************************************************************************************    
                                            20 
add category list in navbar.html

first:
you go in category   you create a new file context_processors.py
you add in :

from .models import category
def menu_links(request):
    links = Category.objects.all()
    return dic(links=links)

after:
you go settings main app
you add   'category.context_processors.menu_links',   in   TEMPLATES

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'category.context_processors.menu_links',
            ],
        },
    },
]

after:
you go navbar.html
1  you add  {for}   show all category
<div class="dropdown-menu">
                    {% for category in links %}
                    <a class="dropdown-item" href="">{{ category.category_name}} </a>
                    {% endfor %}
                    
</div>
2  add url in href=""  for show category

3 go models.py  de category : you add function get_url 
from django.db import models
from django.urls import reverse

# Create your models here.
class Category(models.Model):
    category_name = models.CharField(max_length=50, unique=True)
    slug          = models.SlugField(max_length=100, unique=True)
    description   = models.TextField(max_length=355, blank=True)
    cart_image    = models.ImageField(upload_to='photos/categories', blank=True)
    
    class Meta:
        verbose_name = 'category'
        verbose_name_plural = 'categories'
        
    def get_url(self):
        return reverse('products_by_category', args=[self.slug])
    
    def __str__(self):
        return self.category_name    
    

after    href="{{ category.get_url }}"

<div class="dropdown-menu">
                    {% for category in links %}
                    <a class="dropdown-item" href="{{ category.get_url }}">{{ category.category_name }} </a>
                    {% endfor %}
                    
                </div>

after: you add all products with link href="{% url 'store' %}"
<div class="dropdown-menu">
                    <a class="dropdown-item" href="{% url 'store' %}"> All Products </a>
                    {% for category in links %}
                    <a class="dropdown-item" href="{{ category.get_url }}">{{ category.category_name }} </a>
                    {% endfor %}
                    
                </div>
**************************************************************************************************
                                                   21
after:
you go store.html
change category nav in left 

<div class="card-body">
				
				<ul class="list-menu">
				<li><a href="{% url 'store' %}">All Product</a></li>
			    {% for category in links %}		
				<li><a href="{{ category.get_url }}">{{ category.category_name }}  </a></li>
				{% endfor %}
				
				</ul>

			</div> <!-- card-body.// -->


********************************************************************************************************
                                             22 23 24
add product_detail

go urls.py store create url for product_detail
    path('<slug:category_slug>/<slug:product_slug>/',views.product_detail, name='product_detail'),

from django.urls import path 
from . import views

urlpatterns = [
    path('',views.store, name='store'),
    path('<slug:category_slug>/',views.store, name='products_by_category'),
    path('<slug:category_slug>/<slug:product_slug>/',views.product_detail, name='product_detail'),
]
after:
you go views store create function with 2 args  category_slug   product_slug

def product_detail(request, category_slug, product_slug):
    
    return render(request, 'store/product_detail.html')

after:
you go templates you create file product_detail.html


after:
you improves the function 

def product_detail(request, category_slug, product_slug):
    
    try:
        single_product = Product.objects.get(category__slug=category_slug, slug=product_slug)
    except Exception as e:
        raise e
    context = {
        'single_product':single_product,
    }
    return render(request, 'store/product_detail.html', context)

after:


you go store in models.py at class  Product

you add url for product detail by function  get_url

def get_url(self):
    return reverse('product_detail', args=[self.category.slug, self.slug])

after you go at home.html and store.html you add  {{ product.get_url }}  in href=''  at image and name 

<a href="{{ product.get_url }}" class="title">{{ product.product_name }} </a>


after add url for store and GREATEKART LOGO  and see all
{% url 'store' %} store.html
{% url 'home' %} home.html
{% url 'store' %} See ALL

**************************************************************************************************************************
                                                   25

change banner image  with cover.jpg

**********************************************************************************************************
                                                    26
change botton add cart bay no product

if product stock in database   == 0   button add cart delete and show  out stock

{% if single_product.stock <= 0 %}
		<h5 class="text-danger">Out Of Stock</h5>
{% else %}
		<a href="./product-detail.html" class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i>  </a>
{% endif %}

***************************************************************************************************
                                              27  github
create github
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/saadedi/greatkart-django-saad.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/saadedi/greatkart-django-saad.git
git branch -M main
git push -u origin main
*******************************************************************************************************************
                                                 28 
                                              carts
add carts in settings         

after:   
create file urls.py   
from django.urls import path 
from . import views
urlpatterns = [
    path('',views.cart, name='cart' )
]

after:

create function in views
from django.shortcuts import render

# Create your views here.
def cart(request):
    return render(request, 'store/cart.html')


after:
create file cart.html in templates

after: 
add static image url

                                                  
**********************************************************************************************                                        
                                      29 
cart app in models.py you add two class  Cart   CartItem 

from django.db import models
from store.models import Product

# Create your models here.
class Cart(models.Model):
    cart_id    = models.CharField(max_length=250, blank=True)
    date_added = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.cart_id
    

class CartItem(models.Model):
    product     = models.ForeignKey(Product, on_delete=models.CASCADE)
    cart        = models.ForeignKey(Cart, on_delete=models.CASCADE)
    quantity    = models.IntegerField()
    is_active   = models.BooleanField(default=True)   
    
    
    def __str__(self):
        return self.product


after:

you go admin.py

from django.contrib import admin
from .models import Cart, CartItem

# Register your models here.

admin.site.register(Cart)
admin.site.register(CartItem)

*************************************************************************************************************
                                                   30

you go carts views.py create 3 function _cart_id add_cart  cart 

from django.shortcuts import render
from store.models import Product
from .models import Cart
# Create your views here.

def _cart_id(request):
    cart    = request.session.session_key
    if not cart:
        cart = request.session.create()
    return cart    


def add_cart(request, product_id):
    product = Product.objects.get(id=product_id) # get the product
    try:
        cart   = Cart.objects.get(cart_id=_cart_id(request)) # get the cart using the cart_id present in the session
    except Cart.DoesNotExist:
        cart = Cart.objects.create(
            cart_id = _cart_id(request)
        )
    cart.save()
    
    try:
        cart_item =  CartItem.objects.get(product=product, cart=cart)
        cart_item.quantity += 1 # cart_item = cart_item.quantity + 1
        cart_item.save()
    except CartItem.DoesNotExist:
        cart_item = CartItem.objects.create(
            product  = product,
            quantity = 1,
            cart     = cart,
        )
        cart_item.save()
    return HttpResponse(cart_item.quantity)
    #return redirect('cart')
        
def cart(request):
    
    return render(request, 'store/cart.html')

------------------------------------ suite 31---------------------------------------------------------

you go cart views.py in function cart .
this function you allows to show the quantity  prie and toal the price the products

def cart(request, total=0, quantity=0, cart_item=None):
    try:
        cart      = Cart.objects.get(cart_id = _cart_id(request))
        cart_items = CartItem.objects.filter(cart=cart, is_active=True)
        for cart_item in cart_items:
            total += (cart_item.product.price * cart_item.quantity)
            quantity += cart_item.quantity
            
    except ObjectDoesNotExist:
        pass # just ignore 
    
    context = {
        'total':total,
        'quantity':quantity,
        'cart_items':cart_items,
    }
    return render(request, 'store/cart.html', context)
*********************************************************************************************************
                                             32    
you go cart.html
first:
you add for to show all product bay

{% for cart_item in cart_items %}	
<tr>
	<td>
		<figure class="itemside align-items-center">
			<div class="aside"><img src="{{ cart_item.product.images.url }}" class="img-sm"></div>
			<figcaption class="info">
				<a href="#" class="title text-dark">{{ cart_item.product.product_name }} </a>
				<p class="text-muted small">Color: 25 Mpx <br> Size: Canon</p>
			</figcaption>
		</figure>
	</td>
	<td> 
		<!-- col.// -->
					<div class="col"> 
						<div class="input-group input-spinner">
							<div class="input-group-prepend">
							<button class="btn btn-light" type="button" id="button-plus"> <i class="fa fa-minus"></i> </button>
							</div>
							<input type="text" class="form-control"  value="{{ cart_item.quantity}}">
							<div class="input-group-append">
							<button class="btn btn-light" type="button" id="button-minus"> <i class="fa fa-plus"></i> </button>
							</div>
						</div> <!-- input-group.// -->
					</div> <!-- col.// -->
	</td>
	<td> 
		<div class="price-wrap"> 
			<var class="price">$ {{ cart_item.sub_total }} </var> 
			<small class="text-muted"> $ {{ cart_item.product.price }} </small> 
		</div> <!-- price-wrap .// -->
	</td>
	<td class="text-right"> 
	<a href="" class="btn btn-danger"> Remove</a>
	</td>
</tr>

{% endfor %}

after :
you go carts  models.py 
you add function in CartItem sub_total

def sub_total(self):
    return self.product.price * self.quantity

after:
you go cart.html
you modified
for raise product or delete.  this for raise product : <a href="{% url 'add_cart' cart_item.product.id %}" class="btn btn-light" type="button" id="button-minus"> <i class="fa fa-plus"></i> </a>


<div class="col"> 
<div class="input-group input-spinner">
    <div class="input-group-prepend">
    <button class="btn btn-light" type="button" id="button-plus"> <i class="fa fa-minus"></i> </button>
    </div>
    <input type="text" class="form-control"  value="{{ cart_item.quantity}}">
    <div class="input-group-append">
    <a href="{% url 'add_cart' cart_item.product.id %}" class="btn btn-light" type="button" id="button-minus"> <i class="fa fa-plus"></i> </a>
    </div>
</div> <!-- input-group.// -->

 ------------------------cart------------------continue 33-----------------------------------------------------------
 add tax 
 add grand_total

 in function cart
 def cart(request, total=0, quantity=0, cart_item=None):
    try:
        cart      = Cart.objects.get(cart_id = _cart_id(request))
        cart_items = CartItem.objects.filter(cart=cart, is_active=True)
        for cart_item in cart_items:
            total += (cart_item.product.price * cart_item.quantity)
            quantity += cart_item.quantity


        # tax grand_total

        tax = (2 * total)/100
        grand_total = total + tax

        # tax grand_total
    
    except ObjectDoesNotExist:
        pass # just ignore 
    
    context = {
        'total':total,
        'quantity':quantity,
        'cart_items':cart_items,
        'tax': tax,
        'grand_total': grand_total,
    }
    return render(request, 'store/cart.html', context)

after :
you go cart.html 
you add   {{ tax }}  {{ grand_total }}

<dl class="dlist-align">
	<dt>Tax:</dt>
	<dd class="text-right"> $ {{ tax }} </dd>
</dl>
<dl class="dlist-align">
	<dt>Grand Total:</dt>
	<dd class="text-right text-dark b"><strong>$ {{ grand_total }}</strong></dd>
</dl>
------------------------carts----------------------continue 34------------------------------------------
decrement product 

go carts views.py create function remoce_cart
def remove_cart(request, product_id):
    cart      = Cart.objects.get(cart_id = _cart_id(request))
    product   = get_object_or_404(Product, id=product_id)
    cart_item = CartItem.objects.get(product=product, cart=cart)
    if cart_item.quantity > 1:
        cart_item.quantity -= 1
        cart_item.save()
    else:
        cart_item.delete()  

    return redirect('cart')

after:
you go cart.html 
<div class="input-group-prepend">
<a href="{% url 'remove_cart' cart_item.product.id %}" class="btn btn-light" type="button" id="button-plus"> <i class="fa fa-minus"></i> </a>
</div>


after :
you add url in carts urls
    path('remove_cart/<int:product_id>/',views.remove_cart, name='remove_cart'),


after :
you create function remove_cart_item
def remove_cart_item(request, product_id):
    cart      = Cart.objects.get(cart_id =_cart_id(request))
    product   = get_object_or_404(Product, id=product_id)
    cart_item = CartItem.objects.get(product=product, cart=cart)
    cart_item.delete()  
    return redirect('cart')

go urls.py cart 
    path('remove_cart_item/<int:product_id>/',views.remove_cart_item, name='remove_cart_item'),

go cart.html add {% url 'remove_cart_item' cart_item.product.id %}
<a href="{% url 'remove_cart_item' cart_item.product.id %}" class="btn btn-danger"> Remove</a>

----------------------carts---------------continue 35-------------------------------------------------
if any product in cart 

you go in cart.html 
you add 

<section class="section-content padding-y bg">
<div class="container">
{% if not cart_items %}
<h2 class="text-center">Your shopping cart is empty</h2>
<br>
<div class="text-center">
	<a href="{% url 'store' %}" class="btn btn-primary">Continue Shopping</a>
</div>

{% else %}
all cart.html  image product price total price taxt
{% endif %}

--------------------------carts------------------continue 36---------------------------------------------
fixing add to cart link
in Added to cart  in store 
add  {% url 'add_cart' product.id %}  for could add to cart
<a href="{% url 'add_cart' product.id %}" class="btn btn-block btn-primary">Added to cart </a>

after you go cart.html
in continue shopping you add url 
<a href="{% url 'store' %}" class="btn btn-light btn-block">Continue Shopping</a>

after you go cart.html
in product_name when you put you go in product detail     {{ cart_item.product.get_url }}
<a href="{{ cart_item.product.get_url }}" class="title text-dark">{{ cart_item.product.product_name }} </a>

---------------------carts-----------------------continue 37----------------------------------------------
you go store app views  in function product_detail 
first you import :

from carts.models import CartItem, Cart
from carts.views import _cart_id

in the function product_detail  add (in_cart =)

def product_detail(request, category_slug, product_slug):
    
    try:
        single_product = Product.objects.get(category__slug=category_slug, slug=product_slug)
        # in_cart : lets you know if product what you bay is  in cart or not  
        in_cart        = CartItem.objects.filter(cart__cart_id=_cart_id(request), product=single_product).exists()
        
    except Exception as e:
        raise e
    context = {
        'single_product':single_product,
        'in_cart':in_cart,
    }
    return render(request, 'store/product_detail.html', context)

after:
go product_detail.html


<hr>
	{% if single_product.stock <= 0 %}
		<h5 class="text-danger">Out Of Stock</h5>
	{% else %}
		{% if in_cart %}
		<a href="#" class="btn  btn-success"> <span class="text">Added to cart</span> <i class="fas fa-check"></i></a>
		<a href="{% url 'cart' %}" class="btn  btn-outline-primary"> <span class="text">View Cart</span> <i class="fas fa-eye"></i></a>

		{% else %}
			<a href="{% url 'add_cart' single_product.id  %}" class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i></a>
		{% endif %}
	{% endif %}


***********************************************************************************************************
                                                       38
in carts app create new file context_processors.py    this function lets you know many product in cart 
lets you put formation in templates 

from .models import Cart, CartItem
from .views import _cart_id

def counter(request):
    cart_count = 0
    if 'admin' in request.path:
        return {}
    else:
        try:
            cart       = Cart.objects.filter(cart_id=_cart_id(request))
            cart_items =  CartItem.objects.all().filter(cart=cart[:1])
            for cart_item in cart_items:
                cart_count += cart_item.quantity
            
        except Cart.DoesNotExist:
            cart_count = 0
    return dict(cart_count=cart_count)        


after:
you go greatkart in settings in TEMPLATES: []
you add context_processors 
                'carts.context_processors.counter',

after:
you go navbar.html  you add two things 
1  add url   {% url 'cart' %}     2  add   {{ cart_count}} for count product 
<a href="{% url 'cart' %}" class="widget-header pl-3 ml-3">
    <div class="icon icon-sm rounded-circle border"><i class="fa fa-shopping-cart"></i></div>
    <span class="badge badge-pill badge-danger notify">{{ cart_count}}</span>
</a>

*********************************************************************************************************
                                                39
first:
you go store.html  in add cart you change by View Detail 

<a href="{{ product.get_url }}" class="btn btn-block btn-primary">View Details</a>

******************************************************************************************************************************
                                            40
pagination 
first:
you go store views.py    
you add tree variable  paginator page  paged_products
you add :
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator

def store(request, category_slug=None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category, slug=category_slug)
        products    = Product.objects.filter(category=categories, is_available=True)
        product_count = products.count()
        
    else:    
        products  = Product.objects.all().filter(is_available=True)
        # pagiation
        paginator = Paginator(products, 6)
        page      = request.GET.get('page')
        paged_products = paginator.get_page(page)
        # pagiation
        product_count = products.count()
    context = {
        'products':paged_products,
        'product_count':product_count,
        
    }
    return render(request, 'store/store.html', context)
-----------------------------------paginator suit ----41----------------------------------------    
problem category when we change paged_products 
how to repair 
here is how to  fix it  

you go store views.py you add   # paginator a category-slug
def store(request, category_slug=None):
    categories = None
    products = None
    if category_slug != None:
        categories = get_object_or_404(Category, slug=category_slug)
        products    = Product.objects.filter(category=categories, is_available=True)
         # pagiation
        paginator = Paginator(products, 3)
        page      = request.GET.get('page')
        paged_products = paginator.get_page(page)
         # pagiation
        product_count = products.count()
        
    else:    
        products  = Product.objects.all().filter(is_available=True)
        # pagiation
        paginator = Paginator(products, 3)
        page      = request.GET.get('page')
        paged_products = paginator.get_page(page)
        # pagiation
        product_count = products.count()
    context = {
        'products':paged_products,
        'product_count':product_count,
        
    }
    return render(request, 'store/store.html', context)


after:
you go store.html in nav pagination 

<nav class="mt-4" aria-label="Page navigation sample">
  {% if products.has_other_pages %} 		
  <ul class="pagination">
	{% if products.has_previous %}
    <li class="page-item"><a class="page-link" href="?page={{ products.previous_page_number }}">Previous</a></li>
	{% else %}
    <li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>
	{% endif %}

	{% for i in products.paginator.page_range %}
		{% if products.number == i %}
    		<li class="page-item active"><a class="page-link" href="#">{{ i }}</a></li>
		{% else %}
			<li class="page-item"><a class="page-link" href="?page={{ i }}">{{ i }}</a></li>
		{% endif %}
    {% endfor %}


	{% if products.has_next %}
    	<li class="page-item" ><a class="page-link" href="?page={{ products.next_page_number }}">Next</a></li>
	{% else %}
    	<li class="page-item disabled"><a class="page-link" href="#">Next</a></li>
	{% endif %}
  </ul>
  {% endif %}
</nav>
************************************************42******************************************
 
                                    fixed problem QuerySET
UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'store.models.Product'> QuerySet.

you go store views.py
you add:  .order_by('id)   

else:
    products  = Product.objects.all().filter(is_available=True).order_by('id')
                                  -----------if you have the problem ------------
in carts to views.py  in cart
add :
try:
    tax = 0                                  
    grand_total = 0

**************************************************--43--********************************************
                                                  search
first add url in urls store
    path('search/', views.search, name='search'),
after:
add function search 
def search(request):
    return HttpResponse('search page')

when add word search in url page we have a probleme : No Category matches the given query.
for fix this you want to add category in urls.py in store

path('category/<slug:category_slug>/',views.store, name='products_by_category'),
path('category/<slug:category_slug>/<slug:product_slug>/',views.product_detail, name='product_detail'),

after:
you update function search    without  context
def search(request):
    return render(request, 'store/store.html')


after:
you go navbar.html you add name='keyword' in <input type='text'  

<form action="{% url 'search' %}" method="GET" class="search">
    <div class="input-group w-100">
        <input type="text" class="form-control" style="width:60%;" placeholder="Search" name="keyword">
        
        <div class="input-group-append">
            <button class="btn btn-primary" type="submit">
            <i class="fa fa-search"></i>
            </button>
        </div>
    </div>
</form> <!-- search-wrap 




after:
update function search
1 import Q 
from django.db.models import Q

def search(request):
    if 'keyword' in request.GET:
        keyword = request.GET['keyword']
        if keyword:
            products = Product.objects.order_by('-created_date').filter(Q(description__icontains=keyword) | Q(product_name__icontains=keyword))
            product_count = products.count()
    context = {
        'products':products,
        'product_count':product_count,
    }        
    return render(request, 'store/store.html', context)


after:
you go to store.html  for change page when you put search    our store change by search results

<div class="container">
	{% if 'search' in request.path %}
	<h2 class="title-page">No  Results found. Please try again. </h2>
	{% elif 'category' in request.path %}
	{% else %}
	<h2 class="title-page">Our Store</h2>
	{% endif %}
	
</div> <!-- container //  --

after:
if don't find products in search the message show not product here
{% if products %}
		{% for product in products %}
		<div class="col-md-4">
			<figure class="card card-product-grid">
				<div class="img-wrap"> 
					<a href="{{ product.get_url }}">
						<img src="{{ product.images.url }} ">
					</a>
				</div> <!-- img-wrap.// -->
				<figcaption class="info-wrap">
					<div class="fix-height">
						<a href="{{ product.get_url }}" class="title">{{ product.product_name }} </a>
						<div class="price-wrap mt-2">
							<span class="price">${{ product.price }} </span>
							<!-- <del class="price-old">$1980</del> -->
						</div> <!-- price-wrap.// -->
					</div>
					<a href="{{ product.get_url }}" class="btn btn-block btn-primary">View Details</a>
				</figcaption>
			</figure>
		</div> <!-- col.// -->
		{% endfor %}
{% else %}
		<div class="col-md-12">
			<h3>No Products Found</h3>
		</div>
{% endif %}


after:
you have an error when you put search empty for fixed this error  you should add two variable in function search
1 products = None
2 product-count = 0
error ixed

def search(request):
    products = None
    product_count = 0
    if 'keyword' in request.GET:
        keyword = request.GET['keyword']
        if keyword:
            products = Product.objects.order_by('-created_date').filter(Q(description__icontains=keyword) | Q(product_name__icontains=keyword))
            product_count = products.count()
    context = {
        'products':products,
        'product_count':product_count,
    }        
    return render(request, 'store/store.html', context)

**************************************************************44**********************************************************************
                 for add a cart size color when you choose

any change in form 
<form action="">
	<article class="content-body">

	<h2 class="title">{{ single_product.product_name }} </h2>

	<div class="mb-3"> 
		<var class="price h4">$ {{ single_product.price }}</var> 
	</div> 

	<p>{{ single_product.description }}</p>

	<hr>
		<div class="row">
			<div class="item-option-select">
				<h6>Choose Color</h6>
				<div class="btn-group btn-group-sm btn-group-toggle" data-toggle="buttons">
				<label class="btn btn-light">
					<input type="radio" name="radio_color"> Silver
				</label>
				<label class="btn btn-light">
					<input type="radio" name="radio_color" > Gray
				</label>
				<label class="btn btn-light active">
					<input type="radio" name="radio_color checked"> Gold
				</label>
				<label class="btn btn-light">
					<input type="radio" name="radio_color"> Black
				</label>
				</div> 
			</div>
		</div> <!-- row.// -->
		<div class="row">
			<div class="item-option-select">
				<h6>Select Size</h6>
				<div class="btn-group btn-group-sm btn-group-toggle" data-toggle="buttons">
				<label class="btn btn-light">
					<input type="radio" name="radio_color"> S
				</label>
				<label class="btn btn-light active">
					<input type="radio" name="radio_color" checked> M
				</label>
				<label class="btn btn-light">
					<input type="radio" name="radio_color"> L
				</label>
				<label class="btn btn-light">
					<input type="radio" name="radio_color"> XL
				</label>
				</div> 
			</div>
		</div> <!-- row.// -->
		<hr>
		{% if single_product.stock <= 0 %}
			<h5 class="text-danger">Out Of Stock</h5>
		{% else %}
			{% if in_cart %}
			<a href="#" class="btn  btn-success"> <span class="text">Added to cart</span> <i class="fas fa-check"></i></a>
			<a href="{% url 'cart' %}" class="btn  btn-outline-primary"> <span class="text">View Cart</span> <i class="fas fa-eye"></i></a>

			{% else %}
				<a href="{% url 'add_cart' single_product.id  %}" class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i></a>
			{% endif %}
		{% endif %}
	</article> <!-- product-info-aside .// -->
</form>

after:
change form

you go product_detail.html you add form in <article>
you change <a href="{{}}"> by <button type="submit">  in add cart 

you find url address a add cart and you put in form action
<form  action='{% url 'add_cart' single_product.id  %}' method="GET>


after you go carts app in views to function add_cart  you update  
for show red size in url HttpResponse site


def add_cart(request, product_id):
    color = request.GET['color']
    size = request.GET['size']
    return HttpResponse(color + ' ' + size)  # test
    
    product = Product.objects.get(id=product_id) # get the product
    try:
        cart   = Cart.objects.get(cart_id=_cart_id(request)) # get the cart using the cart_id present in the session
    except Cart.DoesNotExist:
        cart = Cart.objects.create(
            cart_id = _cart_id(request)
        )
    cart.save()
    
    try:
        cart_item =  CartItem.objects.get(product=product, cart=cart)
        cart_item.quantity += 1 # cart_item = cart_item.quantity + 1
        cart_item.save()
    except CartItem.DoesNotExist:
        cart_item = CartItem.objects.create(
            product  = product,
            quantity = 1,
            cart     = cart,
        )
        cart_item.save()
    
    return redirect('cart')


after:
after change form

<form action="{% url 'add_cart' single_product.id  %}" method="GET">
	<article class="content-body">

	<h2 class="title">{{ single_product.product_name }} </h2>

	<div class="mb-3"> 
		<var class="price h4">$ {{ single_product.price }}</var> 
	</div> 

	<p>{{ single_product.description }}</p>

	<hr>
		<div class="row">
			<div class="item-option-select">
				<h6>Choose Color</h6>
				<select name="color" class="form-control">
					<option value="red">Red</option>
					<option value="blue">Blue</option>
					<option value="green">Green</option>
					<option value="yellow">Yellow</option>
				</select>
			</div>
		</div> <!-- row.// -->
		<div class="row">
			<div class="item-option-select">
				<h6>Select Size</h6>
				<select name="size" class="form-control">
					<option value="small">Small</option>
					<option value="medium">Medium</option>
					<option value="large">Large</option>
					<option value="x-large">X-Large</option>
				</select>
			</div>
		</div> <!-- row.// -->
		<hr>
		{% if single_product.stock <= 0 %}
			<h5 class="text-danger">Out Of Stock</h5>
		{% else %}
			{% if in_cart %}
			<a href="#" class="btn  btn-success"> <span class="text">Added to cart</span> <i class="fas fa-check"></i></a>
			<a href="{% url 'cart' %}" class="btn  btn-outline-primary"> <span class="text">View Cart</span> <i class="fas fa-eye"></i></a>

			{% else %}
				<button type="submit"  class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i></button>
			{% endif %}
		{% endif %}
	</article> <!-- product-info-aside .// -->
</form>
--------------------------------------continue---45----------------------color--size------------
you go store app in models.py create new class Variation  and   variation_category_choice

variation_category_choice =(
    ('color', 'color'),
    ('size', 'size'),
)
    
class Variation(models.Model):
    product             = models.ForeignKey(Product, on_delete=models.CASCADE)
    variation_category  = models.CharField(max_length=100, choices=variation_category_choice) 
    variation_value     = models.CharField(max_length=100)
    is_active           = models.BooleanField(default=True)
    created_date        = models.DateTimeField(auto_now_add=True)
    
    def __unicode__(self):    #  unicode  not str
        return self.product  

go admin.py store

class VariationsAdmin(admin.ModelAdmin):
    list_display = ('product', 'variation_category', 'variation_value', 'is_active')
    list_editable = ('is_active',) # for acive in site or deactive. This will make the is_active field editable in the list view
    list_filter = ('product', 'variation_category', 'variation_value', 'is_active')

admin.site.register(Variation, VariationsAdmin)

after:
makemigrations
migrate

after go basedata go Variation and add variation color for atx jeans 
------------------------------------continue-----46--------------------------------------------------
update option for color 

<select name="size" class="form-control">
					
    <option value="red">Red </option>
    <option value="blue">Blue </option>
    <option value="green">Green</option>
    
					
</select>


                                     bay  this


<select name="color" class="form-control">
    <option value="" disabled selected>choose color</option>

	{% for color in single_product.variation_set.all %}
		<option value="{{ color.variation_value }}">{{ color.variation_value }}</option>
	{% endfor %}
										
</select>   

attention   #size = request.GET['size']     commentair  you delete size in return HttpResponse(color alone)
             return HttpResponse(color)

-----------------------------------continue-----47--------------------------------------------------------
go base data in variation  for atx jeans for size

first:  you go store models.py
create new class VariationManager

class VariationManger(models.Manager): # this is used to filter the color and size
    def colors(self):
        return super(VariationManger, self).filter(variation_category='color', is_active=True) # this is used to filter the color
    
    def sizes(self):
        return super(VariationManger, self).filter(variation_category='size', is_active=True) # this is used to filter the size

after:
update  selected for color and size

<div class="item-option-select">
				<h6>Choose Color</h6>
				<select name="color" class="form-control" required>
					<option value="" disabled selected>choose color</option>
					{% for color in single_product.variation_set.colors %} # update add .colors by .all
					<option value="{{ color.variation_value | lower }}">{{ color.variation_value | capfirst }}</option>
					{% endfor %}
					
					
				</select>
			</div>

after :
you go store in models  in class Variation you add :

objects

class Variation(models.Model):
    product             = models.ForeignKey(Product, on_delete=models.CASCADE)# product is the parent
    variation_category  = models.CharField(max_length=100, choices=variation_category_choice) # color or size
    variation_value     = models.CharField(max_length=100)
    is_active           = models.BooleanField(default=True)
    created_date        = models.DateTimeField(auto_now_add=True)
    
    
    objects = VariationManger() # this is used to filter the color and size     update
    
    def __unicode__(self): # this is used to display the variation value in the admin panel
        return self.product  

after you change for to GET by POST 
<form action="{% url 'add_cart' single_product.id  %}" method="POST">   # update

after :
you go carts views.py in add_cart

def add_cart(request, product_id):
    if request.method == 'POST':
        color = request.POST['color']
        size = request.POST['size']
        print(color, size)
-----------------------------------------continue---48--49----------variable--color---size----------------
you go carts views.py in add_cart
def add_cart(request, product_id):
    product = Product.objects.get(id=product_id) # get the product            #   variation
    product_variation = [] # this is used to get the variation
    if request.method == 'POST':
        # you permet to  show color size  in the cart
        for item in request.POST: # this is used to get the product_id from the form
            key = item # this is the product_id
            value = request.POST[key] # this is the product_id
        # you permet to  show color size  in the cart
            try: # this is used to get the variation
                variation = Variation.objects.get(product=product, variation_category__iexact=key, variation_value__iexact=value)# this is used to get the variation
                product_variation.append(variation) # this is used to get the variation
                
            except:
                pass                                                         # variation
            
    try:
        cart   = Cart.objects.get(cart_id=_cart_id(request)) # get the cart using the cart_id present in the session
    except Cart.DoesNotExist:
        cart = Cart.objects.create(
            cart_id = _cart_id(request)
        )
    cart.save()
    
    try:
        cart_item =  CartItem.objects.get(product=product, cart=cart)
        cart_item.quantity += 1 # cart_item = cart_item.quantity + 1
        cart_item.save()
    except CartItem.DoesNotExist:
        cart_item = CartItem.objects.create(
            product  = product,
            quantity = 1,
            cart     = cart,
        )
        cart_item.save()
    
    return redirect('cart')


we have a problem don't show anythings  for fixed 
after you go store models.py 
you change  class Variation two things    __unicode__ by __str__     and self.product by self.variation_value

class Variation(models.Model):
    product             = models.ForeignKey(Product, on_delete=models.CASCADE)# product is the parent
    variation_category  = models.CharField(max_length=100, choices=variation_category_choice) # color or size
    variation_value     = models.CharField(max_length=100)
    is_active           = models.BooleanField(default=True)
    created_date        = models.DateTimeField(auto_now_add=True)
    
    
    objects = VariationManger() # this is used to filter the color and size
    
    def __str__(self): # this is used to display the variation value in the admin panel
        return self.variation_value
    

after:
you go carts models.py in class CartItem and add : variations  = models.ManyToManyField(Variation, blank=True)

class CartItem(models.Model):
    product     = models.ForeignKey(Product, on_delete=models.CASCADE)
    variations  = models.ManyToManyField(Variation, blank=True)
    cart        = models.ForeignKey(Cart, on_delete=models.CASCADE)
    quantity    = models.IntegerField()
    is_active   = models.BooleanField(default=True)   
    
    def sub_total(self):
        return self.product.price * self.quantity
    
    def __str__(self):
        return self.product    
    
after:
makemigrations
migrate

after:
-----------------------------------------continue---50------------variable--color---size----------------
def add_cart(request, product_id):
    # Récupère le produit en utilisant l'identifiant du produit
    product = Product.objects.get(id=product_id)
    # Initialise une liste pour stocker les variations du produit
    product_variation = []
    
    # Vérifie si la méthode de la requête est POST
    if request.method == 'POST':
        # Parcourt les éléments envoyés dans la requête POST
        for item in request.POST:
            key = item  # Clé de l'élément (par exemple, couleur, taille)
            value = request.POST[key]  # Valeur de l'élément (par exemple, rouge, M)
            
            # Essaie de récupérer la variation du produit correspondant à la clé et à la valeur
            try:
                variation = Variation.objects.get(product=product, variation_category__iexact=key, variation_value__iexact=value)
                # Ajoute la variation à la liste des variations du produit
                product_variation.append(variation)
            except:
                pass
    
    # Essaie de récupérer le panier en utilisant l'identifiant du panier présent dans la session
    try:
        cart = Cart.objects.get(cart_id=_cart_id(request))
    except Cart.DoesNotExist:
        # Si le panier n'existe pas, le crée
        cart = Cart.objects.create(cart_id=_cart_id(request))
    cart.save()
    
    # Essaie de récupérer l'élément du panier correspondant au produit et au panier
    try:
        cart_item = CartItem.objects.get(product=product, cart=cart)
        # Si des variations de produit existent, les ajoute à l'élément du panier
        if len(product_variation) > 0:
            cart_item.variations.clear() # ligne efface toutes les variations précédemment associées à l'élément du panier.
            for item in product_variation:
                cart_item.variations.add(item)
        # Incrémente la quantité de l'élément du panier
        cart_item.quantity += 1
        cart_item.save()
    except CartItem.DoesNotExist:
        # Si l'élément du panier n'existe pas, le crée avec une quantité de 1
        cart_item = CartItem.objects.create(
            product  = product,
            quantity = 1,
            cart     = cart,
        )
        # Si des variations de produit existent, les ajoute à l'élément du panier
        if len(product_variation) > 0:
            cart_item.variations.clear() # ligne efface toutes les variations précédemment associées à l'élément du panier.
            for item in product_variation:
                cart_item.variations.add(item)
        cart_item.save()
    
    # Redirige vers la vue du panier
    return redirect('cart')

after :
you go product_detail.html
you change added to cart 
you delete   added to cart and view cart
and you keep this chemma
{% if single_product.stock <= 0 %}
	<h5 class="text-danger">Out Of Stock</h5>
{% else %}
			
	<button type="submit"  class="btn  btn-primary"> <span class="text">Add to cart</span> <i class="fas fa-shopping-cart"></i></button>
			
{% endif %}


after yoou go cart.html. for show color and size in cart  
<p class="text-muted small">
    {% if cart_item.variations.all %}
		{% for item in cart_item.variations.all %}
			{{ item.variation_category | capfirst }}: {{ item.variation_value | capfirst }} <br>
		{% endfor %}
	{% endif %}
</p>

-----------------------------------------continue---51------------variable--color---size----------------

after:
the problem when you add item he update count item but what you want if you add the same product with 
auther color end size hi create new item in cart

fixed the problem or not 

we change two things first 
in function add_cart in cart_item  you change get by create and add quantity=1
 cart_item =  CartItem.objects.create(product=product, quantity=1, cart=cart)

 after you put a commentaire on or erase
         #cart_item.quantity += 1                      # same: cart_item = cart_item.quantity + 1

after:
you have a probleme when you delete the item the site break and he not detect the same item he created another item
the problem is : MultipleObjectsReturned at /cart/remove_cart_item/1/

you change try expect by if  else  in cart_item 

def add_cart(request, product_id):
    # Récupère le produit en utilisant l'identifiant du produit
    product = Product.objects.get(id=product_id)
    # Initialise une liste pour stocker les variations du produit
    product_variation = []
    
    if request.method == 'POST':
        # Parcourt les éléments envoyés dans la requête POST
        for item in request.POST:
            key = item
            value = request.POST[key]
            # Tente de récupérer la variation du produit correspondant aux clés et valeurs
            try:
                variation = Variation.objects.get(product=product, variation_category__iexact=key, variation_value__iexact=value)
                product_variation.append(variation)
            except:
                pass
    
    # Tente de récupérer le panier en utilisant l'identifiant du panier présent dans la session
    try:
        cart = Cart.objects.get(cart_id=_cart_id(request))
    except Cart.DoesNotExist:
        # Si le panier n'existe pas, crée un nouveau panier
        cart = Cart.objects.create(cart_id=_cart_id(request))
    cart.save()
    
    # Vérifie si un élément du panier existe déjà pour ce produit et ce panier
    is_cart_item_exists = CartItem.objects.filter(product=product, cart=cart).exists()
    if is_cart_item_exists:
        # Récupère les éléments du panier existants pour ce produit et ce panier
        cart_item = CartItem.objects.filter(product=product, cart=cart)
        ex_var_list = []
        id = []
        for item in cart_item:
            # Récupère les variations existantes de chaque élément du panier
            existing_variation = item.variations.all()
            ex_var_list.append(list(existing_variation))
            id.append(item.id)
        
        print(ex_var_list)
        
        if product_variation in ex_var_list:
            # Si la variation du produit existe déjà dans le panier, augmente la quantité de l'élément du panier
            index = ex_var_list.index(product_variation)
            item_id = id[index]
            item = CartItem.objects.get(product=product, id=item_id)
            item.quantity += 1
            item.save()
        else:
            # Sinon, crée un nouvel élément du panier avec la variation du produit
            item = CartItem.objects.create(
                product=product,
                quantity=1,
                cart=cart,
            )
            if len(product_variation) > 0:
                # Efface toutes les variations précédemment associées à l'élément du panier
                item.variations.clear()
                # Ajoute les nouvelles variations à l'élément du panier
                item.variations.add(*product_variation)
            item.save()
    else:
        # Si aucun élément du panier n'existe pour ce produit et ce panier, crée un nouvel élément du panier
        cart_item = CartItem.objects.create(
            product=product,
            quantity=1,
            cart=cart,
        )
        if len(product_variation) > 0:
            # Efface toutes les variations précédemment associées à l'élément du panier
            cart_item.variations.clear()
            # Ajoute les nouvelles variations à l'élément du panier
            cart_item.variations.add(*product_variation)
        cart_item.save()
    
    # Redirige vers la vue du panier
    return redirect('cart')

---------------------------cart variation------------52-------------------------------------------------------------    
when we put +  increase item add new without variation. olso we hahe problem with - and remove 

you change many things
<div class="col"> 
						<div class="input-group input-spinner">
							<div class="input-group-prepend">
										
							<a href="{% url 'remove_cart' cart_item.product.id cart_item.id %}"  class="btn btn-light" type="button" id="button-plus"> <i class="fa fa-minus"></i> </a>
								
							</div>

							<input type="text" class="form-control"  value="{{ cart_item.quantity}}">

							<div class="input-group-append">
								<form action="{% url 'add_cart' cart_item.product.id %}" method="POST">
									{% csrf_token %}		
									{% for item in cart_item.variations.all %}
										<input type="hidden" name="{{ item.variation_category }}" value="{{ item.variation_value }}">
									{% endfor %}
										<button  class="btn btn-light" type="submit" id="button-minus"> <i class="fa fa-plus"></i> </button>
								</form>
							</div>
						</div> <!-- input-group.// -->
					</div> <!-- col.// -->

after remove:

<td class="text-right"> 
	<a href="{% url 'remove_cart_item' cart_item.product.id cart_item.id %}"  class="btn btn-danger"> Remove</a>
	
	</td>

go templates  store  cart

for remove:
carts urls.py
go carts urls.py    add  <int:cart_item_id>/      for both
    path('remove_cart/<int:product_id>/<int:cart_item_id>/',views.remove_cart, name='remove_cart'),
    path('remove_cart_item/<int:product_id>/<int:cart_item_id>/',views.remove_cart_item, name='remove_cart_item'),



go carts views.py
you add cart_item_id
def remove_cart(request, product_id, cart_item_id):
    cart      = Cart.objects.get(cart_id = _cart_id(request))
    product   = get_object_or_404(Product, id=product_id)
    try:
        cart_item = CartItem.objects.get(product=product, cart=cart, id=cart_item_id)
        if cart_item.quantity > 1:
            cart_item.quantity -= 1
            cart_item.save()
        else:
            cart_item.delete()    
    except:
        pass
    return redirect('cart')    

after :  
you add the same cart_item_id

def remove_cart_item(request, product_id, cart_item_id):
    cart      = Cart.objects.get(cart_id =_cart_id(request))
    product   = get_object_or_404(Product, id=product_id)
    cart_item = CartItem.objects.get(product=product, cart=cart, id=cart_item_id)
    cart_item.delete()  
    return redirect('cart')

finished:
you add onclick
		<a href="{% url 'remove_cart_item' cart_item.product.id cart_item.id %}" onclick="return confirm('Are you sure you want to delete this item ? ')"  class="btn btn-danger"> Remove</a>
***************************************************53*****************************************************

                               github
 git status
 git add -A                              